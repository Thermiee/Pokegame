{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","className","name","src","alt","type","exp","Component","Pokedex","title","isWinner","pokemon","map","p","base_experience","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTA8BeA,G,uLApBP,IAJUC,EAINC,EAAM,UAND,8DAMC,QAJAD,EAI4BE,KAAKC,MAAMC,KAJlB,IAAM,YAAKJ,GAASK,OAAO,GAAIL,EAIpD,QACV,OACI,6BACI,yBAAKM,UAAU,YACX,wBAAIA,UAAU,kBAAkBJ,KAAKC,MAAMI,MACxC,yBAAKD,UAAU,kBACf,yBAAKE,IAAOP,EAAQQ,IAAKP,KAAKC,MAAMI,QAEvC,yBAAKD,UAAU,iBAAf,SACUJ,KAAKC,MAAMO,MAErB,yBAAKJ,UAAU,iBAAf,QACSJ,KAAKC,MAAMQ,W,GAdjBC,cCiBRC,G,uLAnBX,IAAIC,EAMJ,OAJEA,EADEZ,KAAKC,MAAMY,SACN,wBAAIT,UAAY,kBAAhB,gBAEC,wBAAIA,UAAU,iBAAd,eAGR,yBAAKA,UAAU,WACZQ,EACD,iDAAuBZ,KAAKC,MAAMQ,KACjC,yBAAKL,UAAU,iBACbJ,KAAKC,MAAMa,QAAQC,KAAI,SAACC,GAAD,OAAQ,kBAAC,EAAD,CAAUd,GAAIc,EAAEd,GAAIG,KAAMW,EAAEX,KAAMG,KAAMQ,EAAER,KAAMC,IAAKO,EAAEC,2B,GAb3EP,cCDhBQ,E,iLAkBE,IAFA,IAAIC,EAAO,GACPC,EAAK,YAAOpB,KAAKC,MAAMa,SACpBK,EAAME,OAASD,EAAMC,QAAO,CAC/B,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC3CK,EAAcN,EAAMO,OAAQL,EAAS,GAAG,GAC5CH,EAAMS,KAAKF,GAEf,IAAIG,EAAOV,EAAMW,QAAO,SAACrB,EAAKK,GAAN,OAAkBL,EAAMK,EAAQG,kBAAiB,GACrEc,EAAOX,EAAMU,QAAO,SAACrB,EAAKK,GAAN,OAAkBL,EAAMK,EAAQG,kBAAiB,GAEzE,OACI,6BACI,kBAAC,EAAD,CAASH,QAASK,EAAOV,IAAOoB,EAAMhB,SAAYgB,EAAOE,IACzD,kBAAC,EAAD,CAASjB,QAASM,EAAOX,IAAOsB,EAAOlB,SAAYkB,EAAOF,S,GA7BnDnB,aAAjBQ,EACKc,aAAe,CAClBlB,QACE,CACE,CAAEZ,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQS,gBAAiB,IAC5D,CAAEf,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASS,gBAAiB,IAC3D,CAAEf,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOS,gBAAiB,IACzD,CAAEf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAiB,KAC/D,CAAEf,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYS,gBAAiB,KAC9D,CAAEf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAiB,IAC/D,CAAEf,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUS,gBAAiB,KAC3D,CAAEf,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUS,gBAAiB,MAwBxDC,QCxBAe,G,uLARb,OACE,yBAAK7B,UAAU,OACd,kBAAC,EAAD,W,GAJaM,cCQEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b3b644c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Pokecard.css';\r\n// const POKE_API = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/'\r\n\r\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/'\r\n\r\nlet padToThree = (number) => (number <=999 ? `00${number}`.slice(-3): number);\r\n\r\nclass Pokecard extends Component {\r\n    render() {\r\n        let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`; \r\n        return (\r\n            <div>\r\n                <div className=\"Pokecard\">\r\n                    <h1 className=\"Pokecard-title\">{this.props.name}</h1>\r\n                       <div className=\"Pokecard-image\">\r\n                       <img src = {imgSrc} alt={this.props.name}/>\r\n                           </div>         \r\n                    <div className=\"Pokecard-data\">\r\n                       TYPE: {this.props.type}\r\n                    </div>\r\n                    <div className=\"Pokecard-data\">\r\n                       EXP: {this.props.exp}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokecard;","import React, { Component } from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css'\r\n\r\nclass Pokedex extends Component {\r\n  render() {\r\n    let title;\r\n    if (this.props.isWinner) {\r\n      title= <h1 className = \"Pokedex-winner\">Winning Hand</h1>;\r\n    } else{\r\n      title = <h1 className=\"Pokedex-loser\">Losing Hand</h1>\r\n    }\r\n    return (\r\n      <div className=\"Pokedex\">\r\n        {title}\r\n        <h4>Total Experience: {this.props.exp }</h4>\r\n         <div className=\"Pokedex-cards\">\r\n          {this.props.pokemon.map((p) => (<Pokecard id={p.id} name={p.name} type={p.type} exp={p.base_experience} />))}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pokedex;","import React, { Component } from 'react'\r\nimport Pokedex from './Pokedex'\r\n\r\nclass Pokegame extends Component {\r\n    static defaultProps = {\r\n        pokemon:\r\n          [\r\n            { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\r\n            { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\r\n            { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\r\n            { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\r\n            { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\r\n            { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\r\n            { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\r\n            { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\r\n          ]\r\n      };\r\n\r\n    render() {\r\n        let hand1 =[];\r\n        let hand2 = [...this.props.pokemon];\r\n        while (hand1.length < hand2.length){\r\n            let randIdx = Math.floor(Math.random() * hand2.length);\r\n            let randPokemon = hand2.splice( randIdx, 1)[0];\r\n            hand1.push(randPokemon);\r\n        }\r\n        let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\r\n        let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\r\n       \r\n        return (\r\n            <div>\r\n                <Pokedex pokemon={hand1} exp = {exp1} isWinner = {exp1 > exp2}/>\r\n                <Pokedex pokemon={hand2} exp = {exp2}  isWinner = {exp2 > exp1}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame;","import React, {Component} from 'react';\r\nimport Pokegame from './Pokegame'\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n  render () {\r\n  return (\r\n    <div className=\"App\">\r\n     <Pokegame />\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}